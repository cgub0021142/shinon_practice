$columns: 12;
$gutter: 20px;
// @import "mediaQuery";
.row {
	display: flex;
}
.row-wrap {
	flex-wrap: wrap;
}
.jcsb {
	justify-content: space-between;
}
.jcsb-sm {
	@include phone {
		justify-content: space-between;
	}
}
.jcc-sm {
	@include phone {
		justify-content: center;
	}
}
.jcc-md {
	@include pad {
		justify-content: center;
	}
}
.block-center-md {
	@include pad {
		margin-left: auto !important;
		margin-right: auto !important;
	}
}
.col {
	flex: 0 auto;
}
@for $i from 1 through $columns {
	.col-#{$i} {
		flex: 0 0 (100% / $columns * $i);
	}
}
@for $i from 0 through $columns {
	.col-offset-#{$i} {
		margin-left: 100% / $columns * $i;
	}
}
@each $bp-key, $bp-val in $grid-breakpoint {
	@media (max-width: $bp-val) {
		@for $i from 1 through $columns {
			.col#{$bp-key}-#{$i} {
				flex: 0 0 (100%/12 * $i);
			}
		}
	}
}
@each $bp-key, $bp-val in $grid-breakpoint {
	@media (max-width: $bp-val) {
		@for $i from 0 through $columns {
			.col-offset#{$bp-key}-#{$i} {
				margin-left: (100%/12 * $i);
			}
		}
	}
}
[class*="col"] + [class*="col"] {
	padding-left: $gutter;
}
.row-wrap {
	&.row {
		margin-left: (-$gutter / 2);
		margin-right: (-$gutter / 2);
	}
	> [class*="col"] {
		padding-left: $gutter/2;
		padding-right: $gutter/2;
	}
}
//雖然我目前的寫法是pc first，就是小於以下全部符合。
//但是實際情況中，大概是md以上置中，sm滿版
//所以這邊的cntr我反過來寫，用成@media min-width
//不過後來想想我其實也可以只要cntr + cntr{}fluid就好了

// cntr
.cntr {
	width: 90%;
	max-width: map-get($map: $grid-breakpoint, $key: -lg);
	margin-left: auto;
	margin-right: auto;
}

//bp 以下有置中的效果，如果你只要lg有效果，要搭配cntr-sm-fluid
@each $bp-key, $bp-val in $grid-breakpoint {
	@media (max-width: $bp-val) {
		.cntr#{$bp-key} {
			// width: $bp-val * 0.9;
			width: 90%;
			margin-left: auto;
			margin-right: auto;
		}
		.cntr#{$bp-key}-fluid {
			width: 100%;
		}
	}
}
